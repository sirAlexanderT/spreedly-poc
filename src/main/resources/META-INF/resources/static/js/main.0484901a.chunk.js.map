{"version":3,"sources":["http-common.js","services/GatewayService.js","components/GatewaysList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","delete","name","data","post","GatewaysList","useState","gateways","setGateways","currentGateway","setCurrentGateway","currentIndex","setCurrentIndex","searchName","setSearchName","currentCredentials","setCurrentCredentials","useEffect","retrieveGateways","handleInputChange","event","target","value","GatewayService","then","response","console","log","catch","e","className","type","placeholder","onChange","onClick","map","gateway","index","setActiveGateway","key","gateway_type","company_name","auth_modes","credentials","credential","htmlFor","label","safe","id","required","gatewayType","gatewayCredentials","App","href","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0484901a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:8080/api\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","import http from \"../http-common\";\n\nconst getSupportedGateways = () => {\n    return http.get(\"/gateways/supported\");\n};\n\nconst removeAllSupportedGateways = () => {\n    return http.delete(`/tutorials`);\n};\n\nconst findByName = name => {\n    return http.get(`/tutorials?name=${name}`);\n};\n\nconst create = data => {\n    return http.post(\"/gateways\", data);\n};\n\nexport default {\n    getSupportedGateways,\n    removeAllSupportedGateways,\n    findByName,\n    create\n};","import React, {useEffect, useState} from \"react\";\nimport GatewayService from \"../services/GatewayService\";\n\nconst GatewaysList = () => {\n    const [gateways, setGateways] = useState([]);\n    const [currentGateway, setCurrentGateway] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [searchName, setSearchName] = useState(\"\");\n    const [currentCredentials, setCurrentCredentials] = useState({});\n\n    useEffect(() => {\n        retrieveGateways();\n    }, []);\n\n    const onChangeSearchName = e => {\n        const searchName = e.target.value;\n        setSearchName(searchName);\n    };\n\n    const handleInputChange = event => {\n        const {name, value} = event.target;\n        setCurrentCredentials({...currentCredentials, [name]: value});\n    };\n\n    const createGateway = () => {\n        var data = {\n            gatewayType: currentGateway.gateway_type,\n            gatewayCredentials: currentCredentials\n        };\n\n        console.log(\" we have some data - woohoo! \", data)\n\n        GatewayService.create(data)\n            .then(response => {\n                console.log(\"we have a response\", response.data);\n            })\n            .catch(e => {\n                console.log(\"oh! oh!\", e);\n            });\n    };\n\n    const retrieveGateways = () => {\n        GatewayService.getSupportedGateways()\n            .then(response => {\n                setGateways(response.data.gateways);\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const refreshList = () => {\n        retrieveGateways();\n        setCurrentGateway(null);\n        setCurrentIndex(-1);\n    };\n\n    const setActiveGateway = (gateway, index) => {\n        setCurrentGateway(gateway);\n        setCurrentIndex(index);\n    };\n\n    const removeAllSupportedGateways = () => {\n        GatewayService.removeAllSupportedGateways()\n            .then(response => {\n                console.log(response.data);\n                refreshList();\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByName = () => {\n        GatewayService.findByName(searchName)\n            .then(response => {\n                setGateways(response.data);\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <div className=\"list row\">\n            <div className=\"col-md-8\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by name\"\n                        value={searchName}\n                        onChange={onChangeSearchName}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByName}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-6\">\n                <h4>Gateways List</h4>\n\n                <ul className=\"list-group\">\n                    {gateways &&\n                    gateways.map((gateway, index) => (\n                        <li\n                            className={\n                                \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                            }\n                            onClick={() => setActiveGateway(gateway, index)}\n                            key={index}\n                        >\n                            {gateway.name}\n                        </li>\n                    ))}\n                </ul>\n\n                <button\n                    className=\"m-3 btn btn-sm btn-danger\"\n                    onClick={removeAllSupportedGateways}\n                >\n                    Remove All\n                </button>\n            </div>\n            <div className=\"col-md-6\">\n                {currentGateway ? (\n                    <div>\n                        <h4>Gateway</h4>\n                        <div>\n                            <label>\n                                <strong>Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.name}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Gateway Type:</strong>\n                            </label>{\" \"}\n                            {currentGateway.gateway_type}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Company Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.company_name}\n                        </div>\n\n                        {\n                            currentGateway.auth_modes\n                            && currentGateway.auth_modes[0].credentials.map((credential, index) => (\n                                    <div key={index}>\n                                        <label htmlFor={credential.name + index}>{credential.label}</label>\n                                        <input type={credential.safe ? \"text\" : \"password\"}\n                                               className=\"form-control form-control-sm\"\n                                               name={credential.name}\n                                               id={credential.name + index}\n                                               required\n                                               value={currentCredentials.name}\n                                               onChange={handleInputChange}/>\n                                    </div>\n                                )\n                            )\n                        }\n\n                        <button className=\"m-3 btn btn-sm btn-success\" onClick={createGateway}>\n                            Submit\n                        </button>\n                    </div>\n                ) : (\n                    <div>\n                        <br/>\n                        <p>Please click on a Gateway...</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default GatewaysList;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// import AddGateway from \"./components/AddGateway\";\n// import Gateway from \"./components/Gateway\";\nimport GatewaysList from \"./components/GatewaysList\";\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                    <a href=\"/gateways\" className=\"navbar-brand\">\n                        qudini-spreedly\n                    </a>\n                    <div className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to={\"/gateways\"} className=\"nav-link\">\n                                Gateways\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={\"/add\"} className=\"nav-link\">\n                                Add\n                            </Link>\n                        </li>\n                    </div>\n                </nav>\n\n                <div className=\"container mt-3\">\n                    <Switch>\n                        <Route exact path={[\"/\", \"/gateways\"]} component={GatewaysList} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}