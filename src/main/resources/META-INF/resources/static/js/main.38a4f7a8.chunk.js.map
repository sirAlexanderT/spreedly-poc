{"version":3,"sources":["http-common.js","services/GatewayService.js","services/MerchantService.js","components/GatewaysList.js","actions/ActionTypes.js","services/FetchCategories.js","actions/Categories.js","components/Category.js","components/Product.js","actions/Cart.js","components/Products.js","components/Cart.js","reducers/Cart.js","reducers/index.js","reducers/Categories.js","store/index.js","store/ConfigureStore.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","delete","data","post","GatewaysList","useState","gateways","setGateways","filteredGateways","setFilteredGateways","currentGateway","setCurrentGateway","currentIndex","setCurrentIndex","searchName","setSearchName","currentCredentials","setCurrentCredentials","merchants","setMerchants","selectedMerchantId","setSelectedMerchantId","useEffect","retrieveGateways","retrieveMerchants","handleInputChange","event","target","name","value","GatewayService","then","response","gatewaysResponse","console","log","catch","e","MerchantService","className","type","placeholder","autoComplete","onChange","filtered","filter","str","toLowerCase","includes","onClick","length","map","gateway","index","setActiveGateway","key","gateway_type","company_name","htmlFor","id","merchant","auth_modes","credentials","credential","label","safe","required","qudiniMerchantId","gatewayType","gatewayCredentials","ActionTypes","FetchCategories","url","fetch","json","categoriesIsLoading","bool","isLoading","categoriesFetchDataSuccess","categories","Category","props","active","item","handleSelection","products","connect","state","dispatch","addProduct","product","addProductToCart","price","fetchData","a","categoriesFetchData","setActive","preventDefault","parseInt","getAttribute","isActive","removeProduct","removeProductFromCart","reduce","acc","cur","parseFloat","quantity","toFixed","total","currentItem","updateQuantity","p","combineReducers","action","productInCart","find","slice","Store","store","initialState","createStore","rootReducer","applyMiddleware","thunk","ConfigureStore","App","href","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.38a4f7a8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:8085/api\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","import http from \"../http-common\";\n\nconst getSupportedGateways = () => {\n    return http.get(\"/gateways/supported\");\n};\n\nconst removeAllSupportedGateways = () => {\n    return http.delete(`/tutorials`);\n};\n\nconst findByName = name => {\n    return http.get(`/tutorials?name=${name}`);\n};\n\nconst create = data => {\n    return http.post(\"/gateways\", data);\n};\n\nexport default {\n    getSupportedGateways,\n    removeAllSupportedGateways,\n    findByName,\n    create\n};","import http from \"../http-common\";\n\nconst getAllMerchants = () => {\n    return http.get(\"/merchants\");\n};\n\nexport default {\n    getAllMerchants\n};","import React, {useEffect, useState} from \"react\";\nimport GatewayService from \"../services/GatewayService\";\nimport MerchantService from \"../services/MerchantService\";\n\nconst GatewaysList = () => {\n    const [gateways, setGateways] = useState([]);\n    const [filteredGateways, setFilteredGateways] = useState([]);\n    const [currentGateway, setCurrentGateway] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [searchName, setSearchName] = useState(\"\");\n    const [currentCredentials, setCurrentCredentials] = useState({});\n    const [merchants, setMerchants] = useState([]);\n    const [selectedMerchantId, setSelectedMerchantId] = useState(-1);\n\n    useEffect(() => {\n        retrieveGateways();\n        retrieveMerchants();\n    }, []);\n\n    const onChangeSearchName = e => {\n        const searchName = e.target.value;\n        setSearchName(searchName);\n        let filtered = gateways.filter(str => str.name.toLowerCase().includes(searchName.toLowerCase()));\n        setFilteredGateways(filtered);\n    };\n\n    const handleInputChange = event => {\n        const {name, value} = event.target;\n        setCurrentCredentials({...currentCredentials, [name]: value});\n    };\n\n    const handleMerchantSelect = e => {\n        setSelectedMerchantId(e.target.value);\n    };\n\n\n    const createGateway = () => {\n        let data = {\n            qudiniMerchantId: selectedMerchantId,\n            gatewayType: currentGateway.gateway_type,\n            gatewayCredentials: currentCredentials\n        };\n\n        console.log(\" we have some data - woohoo! \", data)\n\n        GatewayService.create(data)\n            .then(response => {\n                console.log(\"we have a response\", response.data);\n            })\n            .catch(e => {\n                console.log(\"oh! oh!\", e);\n            });\n    };\n\n    const retrieveGateways = () => {\n        GatewayService.getSupportedGateways()\n            .then(response => {\n                const gatewaysResponse = response.data.gateways;\n                setGateways(gatewaysResponse);\n                setFilteredGateways(gatewaysResponse);\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const retrieveMerchants = () => {\n        MerchantService.getAllMerchants()\n            .then(response => {\n                setMerchants(response.data);\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const refreshList = () => {\n        retrieveGateways();\n        setCurrentGateway(null);\n        setCurrentIndex(-1);\n    };\n\n    const setActiveGateway = (gateway, index) => {\n        setCurrentGateway(gateway);\n        setCurrentIndex(index);\n    };\n\n    const removeAllSupportedGateways = () => {\n        GatewayService.removeAllSupportedGateways()\n            .then(response => {\n                console.log(response.data);\n                refreshList();\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByName = () => {\n        let filtered = gateways.filter(str => str.name.toLowerCase().includes(searchName.toLowerCase()));\n        setFilteredGateways(filtered);\n    };\n\n    return (\n        <div className=\"list row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by name\"\n                        autoComplete=\"off\"\n                        value={searchName}\n                        onChange={onChangeSearchName}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByName}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-5 mt-3\">\n                <h4>Supported Gateways</h4>\n                <i>Showing <b>{filteredGateways.length}</b> of <b>{gateways.length}</b></i>\n\n                <ul className=\"list-group scroll overflow-auto mt-3\">\n                    {\n                        filteredGateways &&\n                        filteredGateways.map((gateway, index) => (\n                            <li\n                                className={\n                                    \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                                }\n                                onClick={() => setActiveGateway(gateway, index)}\n                                key={index}\n                            >\n                                {gateway.name}\n                            </li>\n                        ))}\n                </ul>\n\n                <button\n                    className=\"m-3 btn btn-sm btn-secondary\"\n                    onClick={removeAllSupportedGateways}\n                >\n                    Refresh\n                </button>\n            </div>\n            <div className=\"col-md-1\"/>\n            <div className=\"col-md-6 mt-3\">\n                {currentGateway ? (\n                    <div>\n                        <h4>Gateway</h4>\n                        <div className=\"mt-3\">\n                            <label>\n                                <strong>Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.name}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Gateway Type:</strong>\n                            </label>{\" \"}\n                            {currentGateway.gateway_type}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Company Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.company_name}\n                        </div>\n                        <div className=\"form-group mb-3 mt-3\">\n                            <label htmlFor=\"sel1\">\n                                <strong>Select a Merchant:</strong>\n                            </label>\n                            <select\n                                className=\"form-control form-control-sm\"\n                                id=\"sel1\"\n                                onChange={handleMerchantSelect}\n                                value={selectedMerchantId}>\n                                <option value=\"\" className=\"font-weight-bold\">Choose...</option>\n                                {\n                                    merchants &&\n                                    merchants.map((merchant, key) => (\n                                        <option\n                                            value={merchant.id}\n                                            key={key}>{merchant.name}</option>\n                                    ))}\n                            </select>\n                        </div>\n\n                        {\n                            currentGateway.auth_modes\n                            && currentGateway.auth_modes[0].credentials.map((credential, index) => (\n                                    <div key={index}>\n                                        <label htmlFor={credential.name + index}>{credential.label}</label>\n                                        <input type={credential.safe ? \"text\" : \"password\"}\n                                               className=\"form-control form-control-sm\"\n                                               name={credential.name}\n                                               id={credential.name + index}\n                                               required\n                                               value={currentCredentials.name}\n                                               onChange={handleInputChange}/>\n                                    </div>\n                                )\n                            )\n                        }\n\n                        <button className=\"m-3 btn btn-sm btn-success\" onClick={createGateway}>\n                            Submit\n                        </button>\n                    </div>\n                ) : (\n                    <div>\n                        <h5><i>Please click on a Gateway...</i></h5>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default GatewaysList;","export const ActionTypes = {\n    ADD_PRODUCT_TO_CART: \"ADD_PRODUCT_TO_CART\",\n    REMOVE_PRODUCT_FROM_CART: \"REMOVE_PRODUCT_FROM_CART\",\n    CATEGORIES_IS_LOADING: \"CATEGORIES_IS_LOADING\",\n    CATEGORIES_FETCH_DATA_SUCCESS: \"CATEGORIES_FETCH_DATA_SUCCESS\"\n};","export const FetchCategories = url => {\n    return fetch(url)\n        .then(response => response)\n        .then(response => response.json());\n};\n","import { ActionTypes } from \"./ActionTypes\";\nimport { FetchCategories } from \"../services/FetchCategories\";\n\nexport const categoriesIsLoading = bool => {\n    return {\n        type: ActionTypes.CATEGORIES_IS_LOADING,\n        isLoading: bool\n    };\n};\n\nexport const categoriesFetchDataSuccess = categories => {\n    return {\n        type: ActionTypes.CATEGORIES_FETCH_DATA_SUCCESS,\n        categories\n    };\n};\n\nexport const categoriesFetchData = url => {\n    return async dispatch => {\n        dispatch(categoriesIsLoading(true));\n        const categories = await FetchCategories(url);\n        dispatch(categoriesFetchDataSuccess(categories));\n        dispatch(categoriesIsLoading(false));\n    };\n};\n","import React from \"react\";\n\nconst Category = props => {\n    const { active, item, index, handleSelection } = props;\n    return (\n        <a\n            className={active ? \"nav-link active\" : \"nav-link\"}\n            key={index}\n            index={index}\n            onClick={handleSelection}\n        >\n            {item.name} ({item.products.length})\n        </a>\n    );\n};\n\nexport default Category;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addProductToCart } from \"../actions/Cart\";\n\nconst Product = props => {\n    const { item } = props;\n    return (\n        <div className=\"card mb-4 box-shadow\">\n            <div className=\"card-header\"><h4 className=\"my-0 font-weight-normal\">{item.name}</h4></div>\n            <div className=\"card-body\">\n                <h3 className=\"card-title pricing-card-title\">${item.price}</h3>\n                <div className=\"mb-3\"><i>description goes here</i></div>\n                <button type=\"button\"\n                        className=\"btn btn-lg btn-block btn-outline-primary\"\n                        onClick={() => props.addProduct(item)}>\n                    Add to cart\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        products: state.products\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addProduct: product => dispatch(addProductToCart(product))\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Product);","import { ActionTypes } from \"./ActionTypes\";\n\nexport const addProductToCart = product => {\n    return {\n        type: ActionTypes.ADD_PRODUCT_TO_CART,\n        product\n    };\n};\n\nexport const removeProductFromCart = index => {\n    return {\n        type: ActionTypes.REMOVE_PRODUCT_FROM_CART,\n        index\n    };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { categoriesFetchData } from \"../actions/Categories\";\nimport Category from \"./Category\";\nimport Product from \"./Product\";\n\nconst Products = props => {\n    const [active, setActive] = useState(0);\n\n    const handleSelection = e => {\n        e.preventDefault();\n        const index = parseInt(e.target.getAttribute(\"index\"), 10);\n        return setActive(index);\n    };\n\n    const isActive = index => {\n        return index === active;\n    };\n\n    const renderCategory = (item, index) => (\n        <Category\n            key={index}\n            active={isActive(index)}\n            item={item}\n            index={index}\n            handleSelection={handleSelection}\n        />\n    );\n    const renderProduct = (item, index) => <Product key={index} item={item} />;\n    const url =\n        \"https://my-json-server.typicode.com/fmartinsba/shopping-cart/categories\";\n\n    useEffect(() => {\n        props.fetchData(url);\n        return () => {};\n    }, []);\n\n    if (props.isLoading) return <span>loading...</span>;\n    return (\n        <div>\n            <nav className=\"nav nav-tabs mb-3\">{props.categories.map(renderCategory)}</nav>\n            <div className=\"card-deck mb-3 text-center\">\n                {props.categories[active]\n                    ? props.categories[active].products.map(renderProduct)\n                    : false}\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        categories: state.categories,\n        isLoading: state.categoriesIsLoading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: url => dispatch(categoriesFetchData(url))\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Products);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart } from \"../actions/Cart\";\n\nconst Cart = props => {\n    const calculateTotal = (total, currentItem) =>\n        parseFloat(total + currentItem.price * (currentItem.quantity || 1));\n\n    const renderProduct = (product, index) => (\n        <div key={index}>\n            <span>{product.name} </span>\n            <span className=\"ml-3\"> ${product.price} </span>\n            <span className=\"ml-3\">{product.quantity}</span>\n            <input\n                className=\"mt-3 ml-3\"\n                type=\"button\"\n                onClick={() => props.removeProduct(index)}\n                value=\"x\"\n            />\n        </div>\n    );\n\n    const countItems = () =>\n        props.products\n            .reduce((acc, cur) => {\n                return parseFloat(acc + (cur.quantity || 1));\n            }, 0)\n            .toFixed(0);\n\n    return (\n        <div className=\"card mb-4 box-shadow\">\n            <div className=\"card-header\">Cart ({countItems()} items)</div>\n            <div className=\"card-body\">\n                <div className=\"card-title pricing-card-title\">\n                    {props.products.length\n                        ? props.products.map(renderProduct)\n                        : \"Cart is empty.\"}\n                </div>\n            </div>\n            <div className=\"card-footer\">\n                <span>Total </span>\n                <span> ${props.products.reduce(calculateTotal, 0).toFixed(2)}</span>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        products: state.products\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeProduct: index => dispatch(removeProductFromCart(index))\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Cart);\n","import { ActionTypes } from \"../actions/ActionTypes\";\n\nconst updateQuantity = p =>\n    p.quantity ? { ...p, quantity: p.quantity + 1 } : { ...p, quantity: 2 };\n\nexport default (state = [], action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_PRODUCT_TO_CART:\n            const productInCart = state.find(p => p.id === action.product.id);\n            if (!productInCart) return [...state, action.product];\n            return state.map(p => {\n                if (p.id === action.product.id) {\n                    return updateQuantity(p);\n                }\n                return p;\n            });\n        case ActionTypes.REMOVE_PRODUCT_FROM_CART:\n            return [\n                ...state.slice(0, action.index),\n                ...state.slice(action.index + 1)\n            ];\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport { categories, categoriesIsLoading } from \"./Categories\";\nimport products from \"./Cart\";\nexport default combineReducers({\n    categories,\n    categoriesIsLoading,\n    products: products\n});\n","import { ActionTypes } from \"../actions/ActionTypes\";\n\nexport const categoriesIsLoading = (state = false, action) => {\n    switch (action.type) {\n        case ActionTypes.CATEGORIES_IS_LOADING:\n            return action.isLoading;\n        default:\n            return state;\n    }\n};\n\nexport const categories = (state = [], action) => {\n    switch (action.type) {\n        case ActionTypes.CATEGORIES_FETCH_DATA_SUCCESS:\n            return action.categories;\n        default:\n            return state;\n    }\n};\n","import React from \"react\";\nimport Products from \"../components/Products\";\nimport Cart from \"../components/Cart\";\nimport {Provider} from \"react-redux\";\nimport ConfigureStore from \"./ConfigureStore\";\n\nconst Store = props => {\n    const {active, item, index, handleSelection} = props;\n\n    const initialState = {\n        categories: [],\n        categoriesIsLoading: false,\n        products: []\n    };\n\n    const store = ConfigureStore(initialState);\n\n    return (\n        <Provider store={store}>\n            <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n                <h1 className=\"display-4\">Online Services</h1>\n                <p className=\"lead\">Get something.</p>\n            </div>\n\n            <Products/>\n\n            <div className=\"pt-4 my-md-5 pt-md-5 border-top\">\n                <Cart/>\n            </div>\n\n        </Provider>\n    );\n};\n\nexport default Store;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\nexport default initialState => {\n    return createStore(rootReducer, initialState, applyMiddleware(thunk));\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport GatewaysList from \"./components/GatewaysList\";\nimport Store from \"./store\";\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                    <a href=\"/gateways\" className=\"navbar-brand\">\n                        qudini-spreedly\n                    </a>\n                    <div className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to={\"/gateways\"} className=\"nav-link\">\n                                Gateways\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={\"/store\"} className=\"nav-link\">\n                                Store\n                            </Link>\n                        </li>\n                    </div>\n                </nav>\n\n                <div className=\"container mt-3\">\n                    <Switch>\n                        <Route exact path={[\"/\", \"/gateways\"]} component={GatewaysList} />\n                        <Route exact path=\"/store\" component={Store} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}