{"version":3,"sources":["http-common.js","services/GatewayService.js","components/GatewaysList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","delete","data","post","GatewaysList","useState","gateways","setGateways","filteredGateways","setFilteredGateways","currentGateway","setCurrentGateway","currentIndex","setCurrentIndex","searchName","setSearchName","currentCredentials","setCurrentCredentials","useEffect","retrieveGateways","handleInputChange","event","target","name","value","GatewayService","then","response","gatewaysResponse","console","log","catch","e","className","type","placeholder","autocomplete","onChange","filtered","filter","str","toLowerCase","includes","onClick","length","map","gateway","index","setActiveGateway","key","gateway_type","company_name","auth_modes","credentials","credential","htmlFor","label","safe","id","required","gatewayType","gatewayCredentials","App","href","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0a7b3478.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"http://localhost:8085/api\",\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","import http from \"../http-common\";\n\nconst getSupportedGateways = () => {\n    return http.get(\"/gateways/supported\");\n};\n\nconst removeAllSupportedGateways = () => {\n    return http.delete(`/tutorials`);\n};\n\nconst findByName = name => {\n    return http.get(`/tutorials?name=${name}`);\n};\n\nconst create = data => {\n    return http.post(\"/gateways\", data);\n};\n\nexport default {\n    getSupportedGateways,\n    removeAllSupportedGateways,\n    findByName,\n    create\n};","import React, {useEffect, useState} from \"react\";\nimport GatewayService from \"../services/GatewayService\";\n\nconst GatewaysList = () => {\n    const [gateways, setGateways] = useState([]);\n    const [filteredGateways, setFilteredGateways] = useState([]);\n    const [currentGateway, setCurrentGateway] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [searchName, setSearchName] = useState(\"\");\n    const [currentCredentials, setCurrentCredentials] = useState({});\n\n    useEffect(() => {\n        retrieveGateways();\n    }, []);\n\n    const onChangeSearchName = e => {\n        const searchName = e.target.value;\n        setSearchName(searchName);\n        let filtered = gateways.filter(str => str.name.toLowerCase().includes(searchName.toLowerCase()));\n        setFilteredGateways(filtered);\n    };\n\n    const handleInputChange = event => {\n        const {name, value} = event.target;\n        setCurrentCredentials({...currentCredentials, [name]: value});\n    };\n\n    const createGateway = () => {\n        let data = {\n            gatewayType: currentGateway.gateway_type,\n            gatewayCredentials: currentCredentials\n        };\n\n        console.log(\" we have some data - woohoo! \", data)\n\n        GatewayService.create(data)\n            .then(response => {\n                console.log(\"we have a response\", response.data);\n            })\n            .catch(e => {\n                console.log(\"oh! oh!\", e);\n            });\n    };\n\n    const retrieveGateways = () => {\n        GatewayService.getSupportedGateways()\n            .then(response => {\n                const gatewaysResponse = response.data.gateways;\n                setGateways(gatewaysResponse);\n                setFilteredGateways(gatewaysResponse);\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const refreshList = () => {\n        retrieveGateways();\n        setCurrentGateway(null);\n        setCurrentIndex(-1);\n    };\n\n    const setActiveGateway = (gateway, index) => {\n        setCurrentGateway(gateway);\n        setCurrentIndex(index);\n    };\n\n    const removeAllSupportedGateways = () => {\n        GatewayService.removeAllSupportedGateways()\n            .then(response => {\n                console.log(response.data);\n                refreshList();\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByName = () => {\n        let filtered = gateways.filter(str => str.name.toLowerCase().includes(searchName.toLowerCase()));\n        setFilteredGateways(filtered);\n    };\n\n    return (\n        <div className=\"list row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by name\"\n                        autocomplete=\"off\"\n                        value={searchName}\n                        onChange={onChangeSearchName}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByName}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-5 mt-3\">\n                <h4>Supported Gateways</h4>\n                <i>Showing <b>{filteredGateways.length}</b> of <b>{gateways.length}</b></i>\n\n                <ul className=\"list-group scroll overflow-auto mt-3\">\n                    {\n                        filteredGateways &&\n                        filteredGateways.map((gateway, index) => (\n                            <li\n                                className={\n                                    \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\n                                }\n                                onClick={() => setActiveGateway(gateway, index)}\n                                key={index}\n                            >\n                                {gateway.name}\n                            </li>\n                        ))}\n                </ul>\n\n                <button\n                    className=\"m-3 btn btn-sm btn-secondary\"\n                    onClick={removeAllSupportedGateways}\n                >\n                    Refresh\n                </button>\n            </div>\n            <div className=\"col-md-1\"/>\n            <div className=\"col-md-6 mt-3\">\n                {currentGateway ? (\n                    <div>\n                        <h4>Gateway</h4>\n                        <div className=\"mt-3\">\n                            <label>\n                                <strong>Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.name}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Gateway Type:</strong>\n                            </label>{\" \"}\n                            {currentGateway.gateway_type}\n                        </div>\n                        <div>\n                            <label>\n                                <strong>Company Name:</strong>\n                            </label>{\" \"}\n                            {currentGateway.company_name}\n                        </div>\n\n                        {\n                            currentGateway.auth_modes\n                            && currentGateway.auth_modes[0].credentials.map((credential, index) => (\n                                    <div key={index}>\n                                        <label htmlFor={credential.name + index}>{credential.label}</label>\n                                        <input type={credential.safe ? \"text\" : \"password\"}\n                                               className=\"form-control form-control-sm\"\n                                               name={credential.name}\n                                               id={credential.name + index}\n                                               required\n                                               value={currentCredentials.name}\n                                               onChange={handleInputChange}/>\n                                    </div>\n                                )\n                            )\n                        }\n\n                        <button className=\"m-3 btn btn-sm btn-success\" onClick={createGateway}>\n                            Submit\n                        </button>\n                    </div>\n                ) : (\n                    <div>\n                        <h5><i>Please click on a Gateway...</i></h5>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default GatewaysList;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// import AddGateway from \"./components/AddGateway\";\n// import Gateway from \"./components/Gateway\";\nimport GatewaysList from \"./components/GatewaysList\";\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                    <a href=\"/gateways\" className=\"navbar-brand\">\n                        qudini-spreedly\n                    </a>\n                    <div className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to={\"/gateways\"} className=\"nav-link\">\n                                Gateways\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to={\"/add\"} className=\"nav-link\">\n                                Add\n                            </Link>\n                        </li>\n                    </div>\n                </nav>\n\n                <div className=\"container mt-3\">\n                    <Switch>\n                        <Route exact path={[\"/\", \"/gateways\"]} component={GatewaysList} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}